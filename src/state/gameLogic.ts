import type { GameState } from './gameTypes';import { compareTiles, Coord } from '../utils/gameHelpers';export function resolveInitialDraw(state:GameState){const drawn=state.players.map(p=>({name:p.name,tile:state.bag.shift()!}));for(const d of drawn)state.board[d.tile].placed=true;const sorted=[...drawn].sort((a,b)=>compareTiles(a.tile,b.tile));const firstName=sorted[0].name;const firstIndex=state.players.findIndex(p=>p.name===firstName);for(const d of drawn)state.bag.push(d.tile);state.log.push(`Initial draw: ${sorted.map(d=>`${'${'}d.name${'}'}â†’${'${'}d.tile${'}'}`).join(', ')}`);state.log.push(`${'${'}firstName${'}'} will go first.`);return{drawn:sorted,firstIndex};}export function dealOneRound(state:GameState){for(const p of state.players){if(p.hand.length<6){const t=state.bag.shift();if(t)p.hand.push(t);}}}export function allHandsFull(state:GameState){return state.players.every(p=>p.hand.length===6);}export function handleTilePlacement(state:GameState,coord:Coord){const cur=state.players[state.turnIndex];if(!cur.hand.includes(coord))return state;if(state.board[coord].placed)return state;state.board[coord].placed=true;cur.hand=cur.hand.filter(t=>t!==coord);const draw=state.bag.shift();if(draw)cur.hand.push(draw);state.log.push(`${'${'}cur.name${'}'} placed ${'${'}coord${'}'}`);state.turnIndex=(state.turnIndex+1)%state.players.length;return state;}