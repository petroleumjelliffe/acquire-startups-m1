export type Row='A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I';export const ROWS:Row[]=['A','B','C','D','E','F','G','H','I'];export const COLS=Array.from({length:12},(_,i)=>i+1);export type Coord=`${Row}${1|2|3|4|5|6|7|8|9|10|11|12}`;export function coord(r:Row,c:number):Coord{ return `${r}${c}` as Coord;}export function generateAllCoords():Coord[]{const list:Coord[]=[] as any;for(const r of ROWS)for(const c of COLS)list.push(coord(r,c));return list;}export function compareTiles(a:Coord,b:Coord){const rA=a.charCodeAt(0),rB=b.charCodeAt(0);return rA===rB?Number(a.slice(1))-Number(b.slice(1)):rA-rB;}export function hashCode(str:string){let h=0;for(let i=0;i<str.length;i++)h=(h<<5)-h+str.charCodeAt(i)|0;return h>>>0;}export function mulberry32(a:number){return function(){let t=(a+=0x6D2B79F5);t=Math.imul(t^(t>>>15),t|1);t^=t+Math.imul(t^(t>>>7),t|61);return((t^(t>>>14))>>>0)/4294967296;}}export function shuffleSeeded<T>(arr:T[],seed:string){const out=arr.slice();const rand=mulberry32(hashCode(seed));for(let i=out.length-1;i>0;i--){const j=Math.floor(rand()*(i+1));[out[i],out[j]]=[out[j],out[i]];}return out;}